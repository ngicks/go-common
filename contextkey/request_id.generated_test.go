// Code generated by github.com/ngicks/go-common/contextkey/generate DO NOT EDIT
package contextkey

import (
	"context"
	"testing"

)

func TestRequestId(t *testing.T) {
	var zero string

	ctx := context.Background()

	if v := ctx.Value(KeyRequestId); v != nil {
		t.Fatalf("there is value for key %v", KeyRequestId)
	}

	noDefaultValue := func() string { return "foo" }() 
	ctx = WithRequestId(ctx, noDefaultValue)

	v1 := ctx.Value(KeyRequestId)
	if v1 == nil {
		t.Fatalf("no value for key %v", KeyRequestId)
	}
	if _, ok := v1.(string); !ok {
		t.Fatalf("different type associated, want = %s, got = %T", "string", v1)
	}

	getAndCompare := func(eq bool) func(v2 string, ok bool) {
		return func(v2 string, ok bool) {
			t.Helper()
			not := "not "
			if eq {
				not = ""
			}
			if ok != eq {
				t.Fatalf("different type associated, want = %s%s, got = %T", not, "string", v1)
			}

			if func (v1, v2 any) bool { return v1 == v2 }(v1, v2) != eq {
				t.Fatalf("wrong value retrieved, want = %s%v, got = %v", not, v1, v2)
			}
		}
	}

	getAndCompare(true)(ValueRequestId(ctx))
	getAndCompare(true)(ValueRequestIdFallback(ctx, zero), true)
	getAndCompare(true)(ValueRequestIdFallbackFn(ctx, func() string { return zero }), true)
	getAndCompare(true)(ValueRequestIdDefault(ctx), true)

	ctx = context.WithValue(ctx, KeyRequestId, struct{}{})
	getAndCompare(false)(ValueRequestId(ctx))
	getAndCompare(false)(ValueRequestIdFallback(ctx, zero), false)
	getAndCompare(false)(ValueRequestIdFallbackFn(ctx, func() string { return zero }), false)
	getAndCompare(false)(ValueRequestIdDefault(ctx), false)

	ctx = context.Background()
	getAndCompare(false)(ValueRequestId(ctx))
	getAndCompare(false)(ValueRequestIdFallback(ctx, zero), false)
	getAndCompare(false)(ValueRequestIdFallbackFn(ctx, func() string { return zero }), false)
	getAndCompare(false)(ValueRequestIdDefault(ctx), false)

	if v := ValueRequestIdFallback(ctx, noDefaultValue); !func (v1, v2 any) bool { return v1 == v2 }(v, noDefaultValue) {
		t.Fatalf("ValueRequestIdFallback did not fall back correctly. want = %v, got = %v", noDefaultValue, v)
	}
	if v := ValueRequestIdFallbackFn(ctx, func() string { return noDefaultValue }); !func (v1, v2 any) bool { return v1 == v2 }(v, noDefaultValue) {
		t.Fatalf("ValueRequestIdFallbackFn did not fall back correctly. want = %v, got = %v", noDefaultValue, v)
	}

	v := ValueRequestIdDefault(ctx)
	if !func (v1, v2 any) bool { return v1 == v2 }(v, "") {
		def1, def2 := "", ""
		if  !func (v1, v2 any) bool { return v1 == v2 }(def1, def2) {
			t.Logf("default value is non-deterministic; You must implement your own test for ValueRequestIdDefault(ctx)")
		} else {
			t.Fatalf("ValueRequestIdDefault did not fall back to default value")
		}
	}
}