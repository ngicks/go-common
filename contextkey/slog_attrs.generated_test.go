// Code generated by github.com/ngicks/go-common/contextkey/generate DO NOT EDIT
package contextkey

import (
	"context"
	"testing"
	"log/slog"
)

func TestSlogAttrs(t *testing.T) {
	var zero []slog.Attr

	ctx := context.Background()

	if v := ctx.Value(KeySlogAttrs); v != nil {
		t.Fatalf("there is value for key %v", KeySlogAttrs)
	}

	noDefaultValue := func() []slog.Attr { return []slog.Attr{slog.String("foo", "bar")} }() 
	ctx = WithSlogAttrs(ctx, noDefaultValue)

	v1 := ctx.Value(KeySlogAttrs)
	if v1 == nil {
		t.Fatalf("no value for key %v", KeySlogAttrs)
	}
	if _, ok := v1.([]slog.Attr); !ok {
		t.Fatalf("different type associated, want = %s, got = %T", "[]slog.Attr", v1)
	}

	getAndCompare := func(eq bool) func(v2 []slog.Attr, ok bool) {
		return func(v2 []slog.Attr, ok bool) {
			t.Helper()
			not := "not "
			if eq {
				not = ""
			}
			if ok != eq {
				t.Fatalf("different type associated, want = %s%s, got = %T", not, "[]slog.Attr", v1)
			}

			if equalSlogAttrs(v1, v2) != eq {
				t.Fatalf("wrong value retrieved, want = %s%v, got = %v", not, v1, v2)
			}
		}
	}

	getAndCompare(true)(ValueSlogAttrs(ctx))
	getAndCompare(true)(ValueSlogAttrsFallback(ctx, zero), true)
	getAndCompare(true)(ValueSlogAttrsFallbackFn(ctx, func() []slog.Attr { return zero }), true)
	getAndCompare(true)(ValueSlogAttrsDefault(ctx), true)

	ctx = context.WithValue(ctx, KeySlogAttrs, struct{}{})
	getAndCompare(false)(ValueSlogAttrs(ctx))
	getAndCompare(false)(ValueSlogAttrsFallback(ctx, zero), false)
	getAndCompare(false)(ValueSlogAttrsFallbackFn(ctx, func() []slog.Attr { return zero }), false)
	getAndCompare(false)(ValueSlogAttrsDefault(ctx), false)

	ctx = context.Background()
	getAndCompare(false)(ValueSlogAttrs(ctx))
	getAndCompare(false)(ValueSlogAttrsFallback(ctx, zero), false)
	getAndCompare(false)(ValueSlogAttrsFallbackFn(ctx, func() []slog.Attr { return zero }), false)
	getAndCompare(false)(ValueSlogAttrsDefault(ctx), false)

	if v := ValueSlogAttrsFallback(ctx, noDefaultValue); !equalSlogAttrs(v, noDefaultValue) {
		t.Fatalf("ValueSlogAttrsFallback did not fall back correctly. want = %v, got = %v", noDefaultValue, v)
	}
	if v := ValueSlogAttrsFallbackFn(ctx, func() []slog.Attr { return noDefaultValue }); !equalSlogAttrs(v, noDefaultValue) {
		t.Fatalf("ValueSlogAttrsFallbackFn did not fall back correctly. want = %v, got = %v", noDefaultValue, v)
	}

	v := ValueSlogAttrsDefault(ctx)
	if !equalSlogAttrs(v, []slog.Attr(nil)) {
		def1, def2 := []slog.Attr(nil), []slog.Attr(nil)
		if  !equalSlogAttrs(def1, def2) {
			t.Logf("default value is non-deterministic; You must implement your own test for ValueSlogAttrsDefault(ctx)")
		} else {
			t.Fatalf("ValueSlogAttrsDefault did not fall back to default value")
		}
	}
}