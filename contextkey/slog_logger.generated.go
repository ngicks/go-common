// Code generated by github.com/ngicks/go-common/contextkey/generate DO NOT EDIT
package contextkey

import (
	"context"
	"log/slog"
)

var (
	KeySlogLogger = keyTypeFunc("*slog.Logger")
)

// WithSlogLogger returns a copy of parent in which the value associated with KeySlogLogger is v.
// v associated with contexts for KeySlogLogger can later be retrieved by any of Value method,
// ValueSlogLogger, ValueSlogLoggerFallback or ValueSlogLoggerDefault.
func WithSlogLogger(ctx context.Context, v *slog.Logger) context.Context {
	return context.WithValue(ctx, KeySlogLogger, v)
}

// ValueSlogLogger returns *slog.Logger associated with ctx for KeySlogLogger.
// ok is false if the value was not associated or other than *slog.Logger.
func ValueSlogLogger(ctx context.Context) (v *slog.Logger, ok bool) {
	val := ctx.Value(KeySlogLogger)
	if v, ok := val.(*slog.Logger); ok {
		return v, true
	}
	var zero *slog.Logger
	return zero, false
}

// ValueSlogLoggerFallback returns *slog.Logger associated with ctx for KeySlogLogger,
// or in case the value was not associated to ctx, returns fallback.
func ValueSlogLoggerFallback(ctx context.Context, fallback *slog.Logger) *slog.Logger {
	v, ok := ValueSlogLogger(ctx)
	if ok {
		return v
	}
	return fallback
}

// ValueSlogLoggerFallbackFn returns *slog.Logger associated with ctx for KeySlogLogger,
// or in case the value was not associated to ctx, returns calling result of fallbackFn.
func ValueSlogLoggerFallbackFn(ctx context.Context, fallbackFn func() *slog.Logger) *slog.Logger {
	v, ok := ValueSlogLogger(ctx)
	if ok {
		return v
	}
	return fallbackFn()
}

// ValueSlogLoggerDefault returns *slog.Logger associated with ctx for KeySlogLogger.
// In case the value was not associated, returns default value for the type.
//
// The default value is an evaluation result of slog.Default().
func ValueSlogLoggerDefault(ctx context.Context) *slog.Logger {
	return ValueSlogLoggerFallbackFn(ctx, func () *slog.Logger { return slog.Default() })
}
