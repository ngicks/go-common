// Code generated by github.com/ngicks/go-common/contextkey/generate DO NOT EDIT
package contextkey

import (
	"context"
	"sync"
)

var (
	KeySyncMap = keyTypeFunc("*sync.Map")
)

// WithSyncMap returns a copy of parent in which the value associated with KeySyncMap is v.
// v associated with contexts for KeySyncMap can later be retrieved by any of Value method,
// ValueSyncMap, ValueSyncMapFallback or ValueSyncMapDefault.
func WithSyncMap(ctx context.Context, v *sync.Map) context.Context {
	return context.WithValue(ctx, KeySyncMap, v)
}

// ValueSyncMap returns *sync.Map associated with ctx for KeySyncMap.
// ok is false if the value was not associated or other than *sync.Map.
func ValueSyncMap(ctx context.Context) (v *sync.Map, ok bool) {
	val := ctx.Value(KeySyncMap)
	if v, ok := val.(*sync.Map); ok {
		return v, true
	}
	var zero *sync.Map
	return zero, false
}

// ValueSyncMapFallback returns *sync.Map associated with ctx for KeySyncMap,
// or in case the value was not associated to ctx, returns fallback.
func ValueSyncMapFallback(ctx context.Context, fallback *sync.Map) *sync.Map {
	v, ok := ValueSyncMap(ctx)
	if ok {
		return v
	}
	return fallback
}

// ValueSyncMapFallbackFn returns *sync.Map associated with ctx for KeySyncMap,
// or in case the value was not associated to ctx, returns calling result of fallbackFn.
func ValueSyncMapFallbackFn(ctx context.Context, fallbackFn func() *sync.Map) *sync.Map {
	v, ok := ValueSyncMap(ctx)
	if ok {
		return v
	}
	return fallbackFn()
}

// ValueSyncMapDefault returns *sync.Map associated with ctx for KeySyncMap.
// In case the value was not associated, returns default value for the type.
//
// The default value is an evaluation result of new(sync.Map).
func ValueSyncMapDefault(ctx context.Context) *sync.Map {
	return ValueSyncMapFallbackFn(ctx, func () *sync.Map { return new(sync.Map) })
}
